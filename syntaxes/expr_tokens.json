{
    "gcodeFunctions": [
        {
            "name": "Expr",
            "snippet": "EXPR[${1:ExpressionToExecute}]",
            "detail": "Execute expression",
            "documentation": "EXPR[MSG('THIS IS TEXT')]\n\n(result in #<_expr> parameter)"
        },
        {
            "name": "Exists",
            "snippet": "EXISTS[#<${1:ParameterName}>]",
            "detail": "Check if value exists",
            "documentation": "EXISTS[#<PARAM>] = 0"
        }
    ],
    "sections": [
        {
            "name": "#Loop",
            "insertText": "#Loop\n",
            "documentation": "This section is executed aprox. every 83ms."
        },
        {
            "name": "#Loop5",
            "insertText": "#Loop5\n",
            "documentation": "This section is executed every 5 Seconds."
        },
        {
            "name": "#Loop15",
            "insertText": "#Loop15\n",
            "documentation": "This section is executed every 15 Seconds."
        },
        {
            "name": "#Loop60",
            "insertText": "#Loop60\n",
            "documentation": "This section is executed every 60 Seconds."
        },
        {
            "name": "#Loop300",
            "insertText": "#Loop300\n",
            "documentation": "This section is executed every 300 Seconds."
        },
        {
            "name": "#OnInit",
            "insertText": "#OnInit\n",
            "documentation": "This section is executed once on start of software."
        },
        {
            "name": "#OnShutdown",
            "insertText": "#OnShutdown\n",
            "documentation": "This section is executed on shutdown of software."
        },
        {
            "name": "#OnStart",
            "insertText": "#OnStart\n",
            "documentation": "This section is executed on Program start."
        },
        {
            "name": "#OnEnd",
            "insertText": "#OnEnd\n",
            "documentation": "This section is executed on Program end."
        },
        {
            "name": "#OnPause",
            "insertText": "#OnPause\n",
            "documentation": "This section is executed on Machine Pause."
        },
        {
            "name": "#OnStop",
            "insertText": "#OnStop\n",
            "documentation": "This section is executed on Machine Stop / Program End."
        },
        {
            "name": "#OnEStop",
            "insertText": "#OnEStop\n",
            "documentation": "This section is executed on Machine E-Stop."
        },
        {
            "name": "#OnJog",
            "insertText": "#OnJog\n",
            "documentation": "This section is executed if Jogging is used."
        },
        {
            "name": "#OnWheel",
            "insertText": "#OnWheel\n",
            "documentation": "This section is executed if Handwheel is used."
        },
        {
            "name": "#OnCmd",
            "insertText": "#OnCmd\n",
            "documentation": "This section is executed if a command is triggered."
        }
    ],
    "functions": [
        {
            "name": "if",
            "detail": "if(1, print(\"Yes\")) ",
            "documentation": "Conditional statement"
        },
        {
            "name": "for",
            "detail": "for(i=0, i<10, i=i+1, print(\"Loop\", i)) ",
            "documentation": "For statement"
        },
        {
            "name": "exec",
            "detail": "exec(print(\"One\"), msg(\"Two\")) ",
            "documentation": "Executes multiple expressions"
        },
        {
            "name": "return",
            "detail": " ",
            "documentation": "Returns from execution"
        },
        {
            "name": "exists",
            "detail": "exists(_param) = 0",
            "documentation": "Checks if value exists"
        },
        {
            "name": "notexists",
            "detail": "notexists(_param) = 1 ",
            "documentation": "Checks if value does not exists"
        },
        {
            "name": "isnum",
            "detail": " ",
            "documentation": "Checks if value is valid number"
        },
        {
            "name": "nop",
            "detail": "nop() = 0",
            "documentation": "No operation (returns zero)"
        },
        {
            "name": "nan",
            "detail": "nan() = nan",
            "documentation": "NaN value"
        },
        {
            "name": "def",
            "detail": "def(nan(), 100) = 100 ",
            "documentation": "Sets default value"
        },
        {
            "name": "defnz",
            "detail": "defnz(0, 100) = 100",
            "documentation": "Sets default value not zero"
        },
        {
            "name": "abs",
            "detail": "abs(-123) = 123",
            "documentation": "Absolute value"
        },
        {
            "name": "sqrt",
            "detail": "sqrt(9) = 3",
            "documentation": "Square Root"
        },
        {
            "name": "sqr",
            "detail": "sqr(3) = 9",
            "documentation": "Square"
        },
        {
            "name": "sin",
            "detail": "sin(0.524) = 0.500347",
            "documentation": "Sine"
        },
        {
            "name": "cos",
            "detail": "cos(1.047) = 0.500171",
            "documentation": "Cosine"
        },
        {
            "name": "tan",
            "detail": "tan(0.785) = 0.999204",
            "documentation": "Tangent"
        },
        {
            "name": "asin",
            "detail": "asin(0.5) = 0.523599",
            "documentation": "Inverse sine"
        },
        {
            "name": "acos",
            "detail": "acos(0.5) = 1.047198",
            "documentation": "Inverse cosine"
        },
        {
            "name": "atan",
            "detail": "atan(1) = 0.785398",
            "documentation": "Inverse tangent"
        },
        {
            "name": "atan2",
            "detail": "atan2(1,1) = 0.785398",
            "documentation": "Four quadrant inverse tangent"
        },
        {
            "name": "pi",
            "detail": "pi() = 3.141593",
            "documentation": "Pi constant value"
        },
        {
            "name": "rad2deg",
            "detail": "rad2deg(3.141) = 179.966043",
            "documentation": "Radians to degrees"
        },
        {
            "name": "deg2rad",
            "detail": "deg2rad(180) = 3.141593",
            "documentation": "Degrees to radians"
        },
        {
            "name": "e",
            "detail": "e() = 2.718282",
            "documentation": "e constant value"
        },
        {
            "name": "pow",
            "detail": "pow(2,3) = 8",
            "documentation": "Power"
        },
        {
            "name": "exp",
            "detail": "exp(2) = 7.389056",
            "documentation": "e raised to the given power"
        },
        {
            "name": "exp10",
            "detail": "exp10(2) = 100",
            "documentation": "10 raised to the given power"
        },
        {
            "name": "exp2",
            "detail": "exp2(2) = 4",
            "documentation": "2 raised to the given power"
        },
        {
            "name": "log",
            "detail": "log(2) = 0.693147",
            "documentation": "Base e logarithm"
        },
        {
            "name": "log10",
            "detail": "log10(2) = 0.301030",
            "documentation": "Base 10 logarithm"
        },
        {
            "name": "log2",
            "detail": "log2(2) = 1",
            "documentation": "Base 2 logarithm"
        },
        {
            "name": "rand",
            "detail": "rand() = 0.100845",
            "documentation": "random value"
        },
        {
            "name": "inc",
            "detail": "inc(5,10,0) = 6",
            "documentation": "Increases value (value,limit,default)"
        },
        {
            "name": "dec",
            "detail": "dec(5,0,10) = 4",
            "documentation": "Decreases value (value,limit,default)"
        },
        {
            "name": "min",
            "detail": "min(4,6) = 4",
            "documentation": "Minimum"
        },
        {
            "name": "max",
            "detail": "max(4,6) = 6",
            "documentation": "Maximum"
        },
        {
            "name": "round",
            "detail": "round(0.56) = 1",
            "documentation": "Round to nearest integer"
        },
        {
            "name": "roundup",
            "detail": " ",
            "documentation": "Round up or down to nearest integer"
        },
        {
            "name": "floor",
            "detail": "floor(0.56) = 0",
            "documentation": "Round down to nearest value"
        },
        {
            "name": "ceil",
            "detail": "ceil(0.56) = 1",
            "documentation": "Round up to integer"
        },
        {
            "name": "trunc",
            "detail": "trunc(0.56) = 0",
            "documentation": "Truncate to integer"
        },
        {
            "name": "center",
            "detail": "center(0.3,0.2) = 0.2 ",
            "documentation": "Compensate hysteresis"
        },
        {
            "name": "centerex",
            "detail": "centerex(0.3,0.2,1.0,0.8) = 0.044955 ",
            "documentation": "Compensate hysteresis"
        },
        {
            "name": "not",
            "detail": "not(10) = 4294967285",
            "documentation": "Bitwise complement"
        },
        {
            "name": "and",
            "detail": "and(10,3) = 2",
            "documentation": "Bitwise AND"
        },
        {
            "name": "or",
            "detail": "or(10,3) = 11",
            "documentation": "Bitwise non-exclusive OR"
        },
        {
            "name": "xor",
            "detail": "xor(10,3) = 9",
            "documentation": "Bitwise exclusive OR"
        },
        {
            "name": "nand",
            "detail": "nand(10,3) = 4294967293",
            "documentation": "Bitwise NAND"
        },
        {
            "name": "nor",
            "detail": "nor(10,3) = 4294967284",
            "documentation": "Bitwise non-exclusive NOR"
        },
        {
            "name": "xnor",
            "detail": "xnor(10,3) = 4294967286",
            "documentation": "Bitwise exclusive NOR"
        },
        {
            "name": "shl",
            "detail": "shl(10,2) = 40",
            "documentation": "Bitwise shift left"
        },
        {
            "name": "shr",
            "detail": "shr(10,2) = 2",
            "documentation": "Bitwise shift right"
        },
        {
            "name": "lnot",
            "detail": "lnot(1) = 0 ",
            "documentation": "Logic complement"
        },
        {
            "name": "land",
            "detail": "land(1,0) = 0 ",
            "documentation": "Logic AND"
        },
        {
            "name": "lor",
            "detail": "lor(1,0) = 1 ",
            "documentation": "Logic non-exclusive OR"
        },
        {
            "name": "lxor",
            "detail": "lxor(1,0) = 1 ",
            "documentation": "Logic exclusive OR"
        },
        {
            "name": "lnand",
            "detail": "lnand(1,0) = 1 ",
            "documentation": "Logic NAND"
        },
        {
            "name": "lnor",
            "detail": "lnor(1,0) = 0 ",
            "documentation": "Logic non-exclusive NOR"
        },
        {
            "name": "lxnor",
            "detail": "lxnor(1,0) = 0 ",
            "documentation": "Logic exclusive NOR"
        },
        {
            "name": "eq",
            "detail": "eq(10,20)  = 0",
            "documentation": "Relational equality"
        },
        {
            "name": "ne",
            "detail": "ne(10,20)  = 1",
            "documentation": "Relational inequality"
        },
        {
            "name": "gt",
            "detail": "gt(10,20)  = 0",
            "documentation": "Relational strictly greater than"
        },
        {
            "name": "lt",
            "detail": "lt(10,20)  = 1",
            "documentation": "Relational strictly less than"
        },
        {
            "name": "ge",
            "detail": "ge(10,20)  = 0",
            "documentation": "Relational greater than or equal to"
        },
        {
            "name": "le",
            "detail": "le(10,20)  = 1",
            "documentation": "Relational less than or equal to"
        },
        {
            "name": "hex",
            "detail": "hex(\"7E5\")  = 2021",
            "documentation": "Converts string to number"
        },
        {
            "name": "bin",
            "detail": "bin(\"11111100101\")  = 2021",
            "documentation": "Converts string to number"
        },
        {
            "name": "chr",
            "detail": "chr(\"A\")  = 65",
            "documentation": "Converts string to number"
        },
        {
            "name": "sleep",
            "detail": "sleep(100)  ",
            "documentation": "Sleeps n milliseconds"
        },
        {
            "name": "datetime",
            "detail": "datetime()  = 1616502112.792",
            "documentation": "Current time (seconds since 1970)"
        },
        {
            "name": "year",
            "detail": "year(1616502112.792)  = 2021",
            "documentation": "Year from DateTime value"
        },
        {
            "name": "month",
            "detail": "month(1616502112.792)  = 3",
            "documentation": "Month from DateTime value"
        },
        {
            "name": "day",
            "detail": "day(1616502112.792)  = 23",
            "documentation": "Day from DateTime value"
        },
        {
            "name": "hour",
            "detail": "hour(1616502112.792)  = 13",
            "documentation": "Hour from DateTime value"
        },
        {
            "name": "minute",
            "detail": "minute(1616502112.792)  = 21",
            "documentation": "Minute from DateTime value"
        },
        {
            "name": "second",
            "detail": "second(1616502112.792)  = 52",
            "documentation": "Second from DateTime value"
        },
        {
            "name": "millisec",
            "detail": "millisec(1616502112.792)= 792  ",
            "documentation": "Millisecond from DateTime value"
        },
        {
            "name": "rgb2hue",
            "detail": "rgb2hue(11484891) = 283.18470955  ",
            "documentation": "Converts RGB color to hue"
        },
        {
            "name": "rgb2sat",
            "detail": "rgb2sat(11484891) = 71.68949842  ",
            "documentation": "Converts RGB color to saturation"
        },
        {
            "name": "rgb2lum",
            "detail": "rgb2lum(11484891) = 85.88235378  ",
            "documentation": "Converts RGB color to luminence"
        },
        {
            "name": "rubik",
            "detail": "Usage:  ",
            "documentation": "Solves Rubik Cube"
        },
        {
            "name": "url",
            "detail": "url(\"http://www.planet-cnc.com/\")",
            "documentation": "Downloads from internet"
        },
        {
            "name": "sha256",
            "detail": "sha256(\"PlanetCNC\")",
            "documentation": "Calculates SHA256 from string"
        },
        {
            "name": "sha256_f",
            "detail": "sha256_f(\"c:\\myfile.txt\")",
            "documentation": "Calculates SHA256 from file"
        },
        {
            "name": "md5",
            "detail": "md5(\"PlanetCNC\")",
            "documentation": "Calculates MD5 from string"
        },
        {
            "name": "md5_f",
            "detail": "md5_f(\"c:\\myfile.txt\")",
            "documentation": "Calculates MD5 from file"
        },
        {
            "name": "crc16",
            "detail": "crc16(\"PlanetCNC\")",
            "documentation": "Calculates CRC16 from string"
        },
        {
            "name": "crc32",
            "detail": "crc32(\"PlanetCNC\")",
            "documentation": "Calculates CRC32 from string"
        },
        {
            "name": "debug",
            "detail": "debug(\"This is text\")",
            "documentation": "Prints to output window if debug==true"
        },
        {
            "name": "print",
            "detail": "print(\"This is text\")",
            "documentation": "Prints to output window"
        },
        {
            "name": "clear",
            "detail": "clear()",
            "documentation": "Clears output window"
        },
        {
            "name": "status",
            "detail": "status(\"This is text\")",
            "documentation": "Prints to status window"
        },
        {
            "name": "msg",
            "detail": "msg(\"This is text\")",
            "documentation": "Shows dialog"
        },
        {
            "name": "beep",
            "detail": "beep(440, 0.5, 1)",
            "documentation": "Plays beep sound"
        },
        {
            "name": "siren",
            "detail": "siren(440, 10, 1)",
            "documentation": "Plays siren sound"
        },
        {
            "name": "sound_load",
            "detail": "sound_load(0, \"c:\\mysound.mp3\")",
            "documentation": "Loads mp3/wav to sound player"
        },
        {
            "name": "sound_unload",
            "detail": "sound_unload(0)",
            "documentation": "Unloads mp3/wav from sound player"
        },
        {
            "name": "sound_play",
            "detail": "sound_play(0)",
            "documentation": "Starts sound player"
        },
        {
            "name": "sound_stop",
            "detail": "sound_stop(0)",
            "documentation": "Stops sound player"
        },
        {
            "name": "towork",
            "detail": "towork(100,0) = 90",
            "documentation": "Converts machine coordinate to work"
        },
        {
            "name": "toworkxy",
            "detail": "towork(100,50,0)",
            "documentation": "Converts machine coordinate to work"
        },
        {
            "name": "toworkuv",
            "detail": "towork(100,50,0)",
            "documentation": "Converts machine coordinate to work"
        },
        {
            "name": "tomachine",
            "detail": "tomachine(90,0) = 100",
            "documentation": "Converts work coordinate to machine"
        },
        {
            "name": "tomachinexy",
            "detail": "tomachine(90,45,0)",
            "documentation": "Converts work coordinate to machine"
        },
        {
            "name": "tomachineuv",
            "detail": "tomachine(90,45,0)",
            "documentation": "Converts work coordinate to machine"
        },
        {
            "name": "mmtounit",
            "detail": "mmtounit(1) = 0.03937",
            "documentation": "Converts MM to g-code units"
        },
        {
            "name": "unittomm",
            "detail": "unittomm(1) = 25.4",
            "documentation": "Converts g-code units to MM"
        },
        {
            "name": "mmtosetunit",
            "detail": "mmtosetunit(1) = 0.03937",
            "documentation": "Converts MM to settings units"
        },
        {
            "name": "setunittomm",
            "detail": "setunittomm(1) = 25.4",
            "documentation": "Converts settings units to MM"
        },
        {
            "name": "setunit",
            "detail": "setunit(25.4,1) = 25.4",
            "documentation": "Chooses value based on settings units"
        },
        {
            "name": "getparam",
            "detail": "getparam('_machine_x') = 123",
            "documentation": "Gets parameter"
        },
        {
            "name": "setparam",
            "detail": "setparam('_param', 123) = 123",
            "documentation": "Sets parameter"
        },
        {
            "name": "remparam",
            "detail": "",
            "documentation": "Removes parameter"
        },
        {
            "name": "cmd",
            "detail": "",
            "documentation": "Executes 'cmd' command"
        },
        {
            "name": "cmdlist",
            "detail": "",
            "documentation": "Prints all 'cmd' commands"
        },
        {
            "name": "startfn",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "startcode",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "py",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "pythr",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "estop",
            "detail": "",
            "documentation": "E-Stops machine"
        },
        {
            "name": "start",
            "detail": "",
            "documentation": "Starts machine"
        },
        {
            "name": "stop",
            "detail": "",
            "documentation": "Stops machine"
        },
        {
            "name": "pause",
            "detail": "",
            "documentation": "Pause machine"
        },
        {
            "name": "out",
            "detail": "",
            "documentation": "Turns output pin on/off"
        },
        {
            "name": "outpwm",
            "detail": "",
            "documentation": "Turns pwm pin on/off"
        },
        {
            "name": "extout1",
            "detail": "",
            "documentation": "Turns ext1 pin on/off"
        },
        {
            "name": "extout2",
            "detail": "",
            "documentation": "Turns ext2 pin on/off"
        },
        {
            "name": "jog",
            "detail": "",
            "documentation": "Jog machine"
        },
        {
            "name": "usb",
            "detail": "",
            "documentation": "Send USB comand"
        },
        {
            "name": "midi_noteOn",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midi_noteOff",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midi_ctrl",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midi_prog",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midiin_prog",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midiin_note",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "midiin_ctrl",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "pk_digital",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "pk_analog",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "cam_grab",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "cam_color",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "cam_rect",
            "detail": "",
            "documentation": "no description"
        },
        {
            "name": "buffer_new"
        },
        {
            "name": "buffer_delete"
        },
        {
            "name": "buffer_printstring"
        },
        {
            "name": "buffer_printdata"
        },
        {
            "name": "buffer_setstring"
        },
        {
            "name": "buffer_setdata"
        },
        {
            "name": "buffer_setdata16"
        },
        {
            "name": "buffer_setdata32"
        },
        {
            "name": "buffer_crc16"
        },
        {
            "name": "buffer_crc32"
        },
        {
            "name": "serial_list"
        },
        {
            "name": "serial_info"
        },
        {
            "name": "serial_open"
        },
        {
            "name": "serial_config"
        },
        {
            "name": "serial_close"
        },
        {
            "name": "serial_write"
        },
        {
            "name": "serial_writedata"
        },
        {
            "name": "serial_writebuffer"
        },
        {
            "name": "serial_read"
        },
        {
            "name": "serial_readdata"
        },
        {
            "name": "serial_readbuffer"
        },
        {
            "name": "not"
        },
        {
            "name": "and"
        },
        {
            "name": "or"
        },
        {
            "name": "xor"
        },
        {
            "name": "nand"
        },
        {
            "name": "nor"
        },
        {
            "name": "xnor"
        },
        {
            "name": "shl"
        },
        {
            "name": "shr"
        },
        {
            "name": "lnot"
        },
        {
            "name": "land"
        },
        {
            "name": "lor"
        },
        {
            "name": "lxor"
        },
        {
            "name": "lnand"
        },
        {
            "name": "lnor"
        },
        {
            "name": "lxnor"
        },
        {
            "name": "eq"
        },
        {
            "name": "ne"
        },
        {
            "name": "gt"
        },
        {
            "name": "lt"
        },
        {
            "name": "ge"
        },
        {
            "name": "le"
        }
    ],
    "operators": [
        {
            "name": "+",
            "detail": "Addition",
            "documentation": "Usage: 12 + 34 = 46"
        }
    ],
    "parameters": [

    ],
    "gcodes": [

    ],
    "comments": [
        {
            "name": "CLEAR",
            "insertText": "(CLEAR)",
            "detail": "(CLEAR)",
            "documentation": "clears output window"
        },
        {
            "name": "PRINT",
            "snippet": "(PRINT,'${1:text}')\n",
            "detail": "(PRINT,'Text')",
            "documentation": "prints message to output window"
        },
        {
            "name": "STATUS",
            "snippet": "(STATUS,'${1:message}')\n",
            "detail": "(STATUS,'Message')",
            "documentation": "shows message in status bar"
        },
        {
            "name": "MSG",
            "snippet": "(MSG,'${1:message}')\n",
            "detail": "shows dialog with message",
            "documentation": "(MSG,'my Message')"
        },
        {
            "name": "CLIPBOARD",
            "snippet": "(CLIPBOARD,'${1:message}')\n",
            "detail": "stores message to clipboard",
            "documentation": "(CLIPBOARD,'my Text')"
        },
        {
            "name": "MDI",
            "snippet": "(CLIPBOARD,'${1:message}')\n",
            "detail": "stores message to MDI",
            "documentation": "(MDI,'my Text')"
        },
        {
            "name": "LOG",
            "snippet": "(LOG,'${1:message}')\n",
            "detail": "stores message to MDI"
        },
        {
            "name": "LOGCREATE",
            "snippet": "(LOGCREATE, $0)",
            "detail": "creates new log file"
        },
        {
            "name": "LOGOPEN",
            "snippet": "(LOGOPEN, $0)",
            "detail": "opens existing log file"
        },
        {
            "name": "LOGCLOSE",
            "snippet": "(LOGCLOSE, $0)",
            "detail": "closes log file"
        },
        {
            "name": "PARAMSCLEAR",
            "insertText": "(PARAMSCLEAR)",
            "detail": "clears all parameters"
        },
        {
            "name": "TXT",
            "insertText": "(TXT,'${1:text}')",
            "detail": "stores text property"
        },
        {
            "name": "POINTSCLEAR",
            "insertText": "(POINTSCLEAR)",
            "detail": "clears points collection"
        },
        {
            "name": "POINTSSAVE",
            "insertText": "(POINTSSAVE",
            "detail": "saves points collection to file"
        },
        {
            "name": "POINTSLOAD",
            "insertText": "(POINTSLOAD",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINTSLOAD",
            "insertText": "(POINTSLOAD)",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINTSSHAPES",
            "insertText": "(POINTSSHAPES)",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINT",
            "insertText": "(POINT)",
            "detail": "adds point from data to collection"
        },
        {
            "name": "POINT",
            "insertText": "(POINT)",
            "detail": "adds point from probe to collection"
        },
        {
            "name": "POINTPOS",
            "insertText": "(POINTPOS)",
            "detail": "adds point from position to collection"
        },
        {
            "name": "PY",
            "snippet": "(PY,'${1:myFilePath/myfile.py}')",
            "detail": "executes python script synchronousely"
        },
        {
            "name": "PYTHR",
            "snippet": "(PYTHR,'${1:myFilePath/myfile.py}')",
            "detail": "executes python script in async thread"
        },
        {
            "name": "NAME",
            "snippet": "(NAME,'${1:programName}')",
            "detail": "sets program name"
        },
        {
            "name": "DESC",
            "snippet": "(DESC,'${1:description}')",
            "detail": "sets program description"
        },
        {
            "name": "DLGNAME",
            "snippet": "(DLGNAME,'${1:name}')",
            "detail": "sets dialog name"
        },
        {
            "name": "DLG",
            "snippet": "(DLG,${1:properties})",
            "detail": "sets dialog property"
        },
        {
            "name": "DLGSHOW",
            "snippet": "(DLGSHOW)",
            "detail": "shows dialog"
        },
        {
            "name": "ARRAY",
            "snippet": "(ARRAY, $1)",
            "detail": "creates parameters from data"
        },
        {
            "name": "ARCHR",
            "snippet": "(ARARCHRRAY, $1)",
            "detail": "creates parameters from characters"
        },
        {
            "name": "CRC16",
            "snippet": "(CRC16, $1)",
            "detail": "calculates and adds crc16 to parameters"
        },
        {
            "name": "CRC32",
            "snippet": "(CRC32, $1)",
            "detail": "calculates and adds CRC32 to parameters"
        },
        {
            "name": "SW_RESET",
            "snippet": "(SW_RESET)",
            "detail": "stopwatch reset"
        },
        {
            "name": "SW_PRINT",
            "snippet": "(SW_PRINT)",
            "detail": "stopwatch print"
        },
        {
            "name": "BLOCK_BEGIN",
            "snippet": "(BLOCK_BEGIN)",
            "detail": "begin block"
        },
        {
            "name": "BLOCK_BEGIN + BLOCK_END",
            "snippet": "(BLOCK_BEGIN)\n$0\n(BLOCK_BEGIN)",
            "detail": "begin block"
        },
        {
            "name": "BLOCK_END",
            "snippet": "(BLOCK_END)",
            "detail": "end block"
        },
        {
            "name": "USB",
            "snippet": "(USB,$1)",
            "detail": "executes usb command"
        },
        {
            "name": "EXPR",
            "snippet": "(EXPR,$1)",
            "detail": "executes expression"
        },
        {
            "name": "COLOR=0xRRGGBB",
            "snippet": "(COLOR=0x${1:hex_color})",
            "detail": "g-code color",
            "documentation": "Draws all lines in 3D View in the selected color which follows this entry.\n\ng-code color in hex-notation\n\n0xffffff = white, 0x000000 = black, 0xff0000 = red, 0x00ff00 = green, 0x0000ff = blue"
        }
    ],
    "owords": [
        {
            "name": "sub",
            "label": "sub..endsub subroutine block",
            "detail": "sub..endsub subroutine block",
            "documentation": "O<id> sub\n  ...\nO<id> endsub [optional_value]",
            "snippet": "O<${1:mySub}> sub\n\t$0\nO<$1> endsub"
        },
        {
            "name": "sub",
            "label": "sub..",
            "detail": "Begin of subroutine block",
            "documentation": "O<id> sub",
            "snippet": "O<${1:mySub}> sub\n"
        },
        {
            "name": "endsub",
            "detail": "End subroutine",
            "documentation": "o<id> endsub",
            "snippet": "O<${1:mySub}> endsub\n$0"
        },
        {
            "name": "return",
            "detail": "Exit subroutine",
            "documentation": "O<id> return",
            "snippet": "O<${1:mySub}> return\n$0"
        },
        {
            "name": "call",
            "detail": "Call subroutine",
            "documentation": "O<id> call",
            "snippet": "O<${1:mySub}> call $t0"
        },
        {
            "name": "call",
            "label": "call [value]",
            "detail": "Call subroutine with value",
            "documentation": "O<id> sub\n\t(print,Values: #1, #2)\nO<id> endsub [13]\n\nO<id> call [11] [12]\n(print,Returned value: #<_return>)",
            "snippet": "O<${1:mySub}> call /[${2:myValue/] $t0"
        },
        {
            "name": "do",
            "label": "do..while",
            "detail": "do..while loop block",
            "documentation": "O<test> do\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> while [#<_cnt> GT 0]",
            "snippet": "O<${1:myBlock}> do\n\t$0\nO<$1> while [${2:condition}]"
        },
        {
            "name": "while",
            "label": "while..endwhile",
            "detail": "while..endwhile loop block",
            "documentation": "#<_cnt> = 10\n(print,BEGIN: #<_cnt>)\nO<test> while [#<_cnt> GT 0]\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> endwhile\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> while [$2:condition]\n\t$0\nO<$1> endwhile"
        },
        {
            "name": "endwhile",
            "detail": "end of while.. block",
            "documentation": "#<_cnt> = 10\n(print,BEGIN: #<_cnt>)\nO<test> while [#<_cnt> GT 0]\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> endwhile\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> endwhile\n"
        },
        {
            "name": "continue",
            "detail": "Skip the remaining block and start next loop",
            "documentation": "O<test> continue\nSkip the remaining block and start next loop",
            "snippet": "O<${1:myBlock}> continue"
        },
        {
            "name": "break",
            "detail": "Exit the loop block",
            "documentation": "O<test> break\nExit the loop block",
            "snippet": "O<${1:myBlock}> break"
        },
        {
            "name": "repeat",
            "detail": "repeat..endrepeat loop block",
            "documentation": "#<_cnt> = 0\n(print,BEGIN: #<_cnt>)\nO<test> repeat[5]\n  #<_cnt> = [#<_cnt> + 1]\n  (print,CNT: #<_cnt>)\nO<test> endrepeat\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> repeat [${2:count}]\n\t$0\nO<$1> endrepeat\n"
        },
        {
            "name": "endrepeat",
            "detail": "endrepeat - End of loop block",
            "documentation": "#<_cnt> = 0\n(print,BEGIN: #<_cnt>)\nO<test> repeat[5]\n  #<_cnt> = [#<_cnt> + 1]\n  (print,CNT: #<_cnt>)\nO<test> endrepeat\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> endrepeat\n"
        },
        {
            "name": "if",
            "label": "if..",
            "detail": "Beginn of if.. block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t"
        },
        {
            "name": "if",
            "label": "if..endif",
            "detail": "if..endif condition block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t$0\nO<$1> endif\n"
        },
        {
            "name": "if",
            "label": "if..else..endif",
            "detail": "if..else..endif condition block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t$3\nO<$1> else\n\t$0\nO<$1> endif\n"
        },
        {
            "name": "elseif",
            "detail": "elseif [condition evaluation]",
            "snippet": "O<${1:myBlock}> elseif [${2:condition}]\n"
        },
        {
            "name": "endif",
            "detail": " - End of if..endif condition block",
            "snippet": "O<${1:myBlock}> endif"
        }
    ],
    "macros": [
      
    ]
}