{
    "gcodeFunctions": [
        {
            "name": "Expr",
            "snippet": "EXPR[${1:ExpressionToExecute}]",
            "detail": "Execute expression",
            "documentation": "EXPR[MSG('THIS IS TEXT')]\n\n(result in #<_expr> parameter)"
        },
        {
            "name": "Exists",
            "snippet": "EXISTS[#<${1:ParameterName}>]",
            "detail": "Check if value exists",
            "documentation": "EXISTS[#<PARAM>] = 0"
        }
    ],
    "events": [
      
    ],
    "functions": [
        
    ],
    "operators": [

    ],
    "parameters": [

    ],
    "gcodes": [

    ],
    "comments": [
        {
            "name": "CLEAR",
            "insertText": "(CLEAR)",
            "detail": "(CLEAR)",
            "documentation": "clears output window"
        },
        {
            "name": "PRINT",
            "snippet": "(PRINT,'${1:text}')\n",
            "detail": "(PRINT,'Text')",
            "documentation": "prints message to output window"
        },
        {
            "name": "STATUS",
            "snippet": "(STATUS,'${1:message}')\n",
            "detail": "(STATUS,'Message')",
            "documentation": "shows message in status bar"
        },
        {
            "name": "MSG",
            "snippet": "(MSG,'${1:message}')\n",
            "detail": "shows dialog with message",
            "documentation": "(MSG,'my Message')"
        },
        {
            "name": "CLIPBOARD",
            "snippet": "(CLIPBOARD,'${1:message}')\n",
            "detail": "stores message to clipboard",
            "documentation": "(CLIPBOARD,'my Text')"
        },
        {
            "name": "MDI",
            "snippet": "(CLIPBOARD,'${1:message}')\n",
            "detail": "stores message to MDI",
            "documentation": "(MDI,'my Text')"
        },
        {
            "name": "LOG",
            "snippet": "(LOG,'${1:message}')\n",
            "detail": "stores message to MDI"
        },
        {
            "name": "LOGCREATE",
            "snippet": "(LOGCREATE, $0)",
            "detail": "creates new log file"
        },
        {
            "name": "LOGOPEN",
            "snippet": "(LOGOPEN, $0)",
            "detail": "opens existing log file"
        },
        {
            "name": "LOGCLOSE",
            "snippet": "(LOGCLOSE, $0)",
            "detail": "closes log file"
        },
        {
            "name": "PARAMSCLEAR",
            "insertText": "(PARAMSCLEAR)",
            "detail": "clears all parameters"
        },
        {
            "name": "TXT",
            "insertText": "(TXT,'${1:text}')",
            "detail": "stores text property"
        },
        {
            "name": "POINTSCLEAR",
            "insertText": "(POINTSCLEAR)",
            "detail": "clears points collection"
        },
        {
            "name": "POINTSSAVE",
            "insertText": "(POINTSSAVE",
            "detail": "saves points collection to file"
        },
        {
            "name": "POINTSLOAD",
            "insertText": "(POINTSLOAD",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINTSLOAD",
            "insertText": "(POINTSLOAD)",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINTSSHAPES",
            "insertText": "(POINTSSHAPES)",
            "detail": "loads points collection from file"
        },
        {
            "name": "POINT",
            "insertText": "(POINT)",
            "detail": "adds point from data to collection"
        },
        {
            "name": "POINT",
            "insertText": "(POINT)",
            "detail": "adds point from probe to collection"
        },
        {
            "name": "POINTPOS",
            "insertText": "(POINTPOS)",
            "detail": "adds point from position to collection"
        },
        {
            "name": "PY",
            "snippet": "(PY,'${1:myFilePath/myfile.py}')",
            "detail": "executes python script synchronousely"
        },
        {
            "name": "PYTHR",
            "snippet": "(PYTHR,'${1:myFilePath/myfile.py}')",
            "detail": "executes python script in async thread"
        },
        {
            "name": "NAME",
            "snippet": "(NAME,'${1:programName}')",
            "detail": "sets program name"
        },
        {
            "name": "DESC",
            "snippet": "(DESC,'${1:description}')",
            "detail": "sets program description"
        },
        {
            "name": "DLGNAME",
            "snippet": "(DLGNAME,'${1:name}')",
            "detail": "sets dialog name"
        },
        {
            "name": "DLG",
            "snippet": "(DLG,${1:properties})",
            "detail": "sets dialog property"
        },
        {
            "name": "DLGSHOW",
            "snippet": "(DLGSHOW)",
            "detail": "shows dialog"
        },
        {
            "name": "ARRAY",
            "snippet": "(ARRAY, $1)",
            "detail": "creates parameters from data"
        },
        {
            "name": "ARCHR",
            "snippet": "(ARARCHRRAY, $1)",
            "detail": "creates parameters from characters"
        },
        {
            "name": "CRC16",
            "snippet": "(CRC16, $1)",
            "detail": "calculates and adds crc16 to parameters"
        },
        {
            "name": "CRC32",
            "snippet": "(CRC32, $1)",
            "detail": "calculates and adds CRC32 to parameters"
        },
        {
            "name": "SW_RESET",
            "snippet": "(SW_RESET)",
            "detail": "stopwatch reset"
        },
        {
            "name": "SW_PRINT",
            "snippet": "(SW_PRINT)",
            "detail": "stopwatch print"
        },
        {
            "name": "BLOCK_BEGIN",
            "snippet": "(BLOCK_BEGIN)",
            "detail": "begin block"
        },
        {
            "name": "BLOCK_BEGIN + BLOCK_END",
            "snippet": "(BLOCK_BEGIN)\n$0\n(BLOCK_BEGIN)",
            "detail": "begin block"
        },
        {
            "name": "BLOCK_END",
            "snippet": "(BLOCK_END)",
            "detail": "end block"
        },
        {
            "name": "USB",
            "snippet": "(USB,$1)",
            "detail": "executes usb command"
        },
        {
            "name": "EXPR",
            "snippet": "(EXPR,$1)",
            "detail": "executes expression"
        },
        {
            "name": "COLOR=0xRRGGBB",
            "snippet": "(COLOR=0x${1:hex_color})",
            "detail": "g-code color",
            "documentation": "Draws all lines in 3D View in the selected color which follows this entry.\n\ng-code color in hex-notation\n\n0xffffff = white, 0x000000 = black, 0xff0000 = red, 0x00ff00 = green, 0x0000ff = blue"
        }
    ],
    "owords": [
        {
            "name": "sub",
            "label": "sub..endsub subroutine block",
            "detail": "sub..endsub subroutine block",
            "documentation": "O<id> sub\n  ...\nO<id> endsub [optional_value]",
            "snippet": "O<${1:mySub}> sub\n\t$0\nO<$1> endsub"
        },
        {
            "name": "sub",
            "label": "sub..",
            "detail": "Begin of subroutine block",
            "documentation": "O<id> sub",
            "snippet": "O<${1:mySub}> sub\n"
        },
        {
            "name": "endsub",
            "detail": "End subroutine",
            "documentation": "o<id> endsub",
            "snippet": "O<${1:mySub}> endsub\n$0"
        },
        {
            "name": "return",
            "detail": "Exit subroutine",
            "documentation": "O<id> return",
            "snippet": "O<${1:mySub}> return\n$0"
        },
        {
            "name": "call",
            "detail": "Call subroutine",
            "documentation": "O<id> call",
            "snippet": "O<${1:mySub}> call $t0"
        },
        {
            "name": "call",
            "label": "call [value]",
            "detail": "Call subroutine with value",
            "documentation": "O<id> sub\n\t(print,Values: #1, #2)\nO<id> endsub [13]\n\nO<id> call [11] [12]\n(print,Returned value: #<_return>)",
            "snippet": "O<${1:mySub}> call /[${2:myValue/] $t0"
        },
        {
            "name": "do",
            "label": "do..while",
            "detail": "do..while loop block",
            "documentation": "O<test> do\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> while [#<_cnt> GT 0]",
            "snippet": "O<${1:myBlock}> do\n\t$0\nO<$1> while [${2:condition}]"
        },
        {
            "name": "while",
            "label": "while..endwhile",
            "detail": "while..endwhile loop block",
            "documentation": "#<_cnt> = 10\n(print,BEGIN: #<_cnt>)\nO<test> while [#<_cnt> GT 0]\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> endwhile\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> while [$2:condition]\n\t$0\nO<$1> endwhile"
        },
        {
            "name": "endwhile",
            "detail": "end of while.. block",
            "documentation": "#<_cnt> = 10\n(print,BEGIN: #<_cnt>)\nO<test> while [#<_cnt> GT 0]\n#<_cnt> = [#<_cnt> - 1]\n(print,CNT: #<_cnt>)\nO<test> endwhile\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> endwhile\n"
        },
        {
            "name": "continue",
            "detail": "Skip the remaining block and start next loop",
            "documentation": "O<test> continue\nSkip the remaining block and start next loop",
            "snippet": "O<${1:myBlock}> continue"
        },
        {
            "name": "break",
            "detail": "Exit the loop block",
            "documentation": "O<test> break\nExit the loop block",
            "snippet": "O<${1:myBlock}> break"
        },
        {
            "name": "repeat",
            "detail": "repeat..endrepeat loop block",
            "documentation": "#<_cnt> = 0\n(print,BEGIN: #<_cnt>)\nO<test> repeat[5]\n  #<_cnt> = [#<_cnt> + 1]\n  (print,CNT: #<_cnt>)\nO<test> endrepeat\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> repeat [${2:count}]\n\t$0\nO<$1> endrepeat\n"
        },
        {
            "name": "endrepeat",
            "detail": "endrepeat - End of loop block",
            "documentation": "#<_cnt> = 0\n(print,BEGIN: #<_cnt>)\nO<test> repeat[5]\n  #<_cnt> = [#<_cnt> + 1]\n  (print,CNT: #<_cnt>)\nO<test> endrepeat\n(print,END: #<_cnt>)",
            "snippet": "O<${1:myBlock}> endrepeat\n"
        },
        {
            "name": "if",
            "label": "if..",
            "detail": "Beginn of if.. block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t"
        },
        {
            "name": "if",
            "label": "if..endif",
            "detail": "if..endif condition block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t$0\nO<$1> endif\n"
        },
        {
            "name": "if",
            "label": "if..else..endif",
            "detail": "if..else..endif condition block",
            "snippet": "O<${1:myBlock}> if [${2:condition}]\n\t$3\nO<$1> else\n\t$0\nO<$1> endif\n"
        },
        {
            "name": "elseif",
            "detail": "elseif [condition evaluation]",
            "snippet": "O<${1:myBlock}> elseif [${2:condition}]\n"
        },
        {
            "name": "endif",
            "detail": " - End of if..endif condition block",
            "snippet": "O<${1:myBlock}> endif"
        }
    ],
    "macros": [
      
    ]
}